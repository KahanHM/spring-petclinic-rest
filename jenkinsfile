def terraformChanged = false
def ansibleChanged   = false
pipeline {
  agent { label 'Agent1' }

  options {
    skipDefaultCheckout(true)
  }

  environment {
    TF_VAR_project_id = 'earnest-scene-454409-t5'
    EMAIL_RECIPIENTS = 'kahanahamed42@gmail.com'
    RELEASE_FILE = 'release.yml'
  }

  stages {

    stage('Clone Repo and Detect Changes') {
      steps {
        script {
          if (fileExists('jenkinsfile')) {
            sh 'git reset --hard HEAD && git pull origin master'
          } else {
            sh 'git clone https://github.com/KahanHM/spring-petclinic-rest.git .'
          }
          checkout scm

          def changedFiles = sh(
            script: '''
              if [ -n "$CHANGE_ID" ]; then
                git diff --name-only origin/master...HEAD
              else
                git diff --name-only HEAD~1 HEAD
              fi
            ''', returnStdout: true
          ).trim()

          echo "Changed files:\n${changedFiles}"

          if (changedFiles.contains('terraform/') &&
              (changedFiles.contains('.tf') || changedFiles.contains('.tfvars'))) {
            terraformChanged = true
          }
          echo "DEBUG: terraformChanged = ${terraformChanged}"

          if (changedFiles.split('\n').any { it.startsWith('Ansible/') }) {
            ansibleChanged = true
          }
          echo "DEBUG: ansibleChanged = ${ansibleChanged}"
        }
      }
    }




    stage('Terraform Init') {
      when {
        expression { return terraformChanged }
      }
      steps {
        withCredentials([file(credentialsId: 'GCP-credinals', variable: 'GCP_credinals')]) {
          script {
            try {
              sh '''
                docker run --rm \
                  -v "$PWD/terraform:/workspace" \
                  -v "$GCP_credinals:/workspace/creds.json" \
                  -w /workspace \
                  -e GOOGLE_APPLICATION_CREDENTIALS="/workspace/creds.json" \
                  hashicorp/terraform:1.9.7 \
                  init \
                    -backend-config="bucket=my-tf-petclinic-backend" \
                    -backend-config="prefix=petclinic/petclinic-backend" \
                    -backend-config="credentials=/workspace/creds.json"
              '''
            } catch (err) {
              emailext(
                subject: "Terraform Init Failed",
                body: "Terraform init failed. Check Jenkins logs for details.",
                to: "${env.EMAIL_RECIPIENTS}"
              )
              error("Terraform init failed")
            }
          }
        }
      }
    }

    stage('Security and Validation Checks') {
      when {
        expression { return terraformChanged }
      }
      steps {
        script {
          try {
            sh 'docker run --rm -v "$PWD/terraform:/src" aquasec/tfsec:latest /src'
            echo "tfsec scan passed."
          } catch (err) {
            emailext(
              subject: "tfsec Scan Failed",
              body: "tfsec scan failed. Please check your Terraform code.",
              to: "${env.EMAIL_RECIPIENTS}"
            )
            error("Stopping pipeline due to tfsec failure")
          }

          try {
            sh '''
              docker run --rm \
                -v "$PWD/terraform:/workspace" \
                -w /workspace \
                hashicorp/terraform:1.9.7 \
                validate
            '''
            echo "Terraform validate passed."
          } catch (err) {
            emailext(
              subject: "Terraform Validate Failed",
              body: "Terraform validation failed. Please fix errors before proceeding.",
              to: "${env.EMAIL_RECIPIENTS}"
            )
            error("Stopping pipeline due to terraform validate failure")
          }

          echo "Security and validation checks passed. Proceeding..."
        }
      }
    }

    stage('Terraform Plan') {
  when { expression { return terraformChanged } }
  steps {
    withCredentials([file(credentialsId: 'GCP-credinals', variable: 'GCP_CRED')]) {
      script {
        // 1) Run plan with detailed exit code
        def exitCode = sh(
          script: '''
            docker run --rm \
              -v "$PWD/terraform:/workspace" \
              -v "$GCP_CRED:/workspace/creds.json" \
              -w /workspace \
              -e GOOGLE_APPLICATION_CREDENTIALS="/workspace/creds.json" \
              hashicorp/terraform:1.9.7 \
              plan -detailed-exitcode -out=tfplan || true
          ''',
          returnStatus: true
        )

        // 2) If exitCode == 1, it's a real error
        if (exitCode == 1) {
          error("Terraform plan failed — syntax/config error. Check logs.")
        }

        // 3) Inspect plan output for update/destroy
        if (exitCode == 2) {
          // dump plan to text
          def planText = sh(
            script: '''
              docker run --rm \
                -v "$PWD/terraform:/workspace" \
                -w /workspace \
                hashicorp/terraform:1.9.7 \
                show -no-color tfplan
            ''',
            returnStdout: true
          )

          // look for "~ " (in‑place update) or "- " (destroy)
          if (planText.contains("~ ") || planText.contains("- ")) {
            emailext(
              subject: " Drift Detected",
              body: """Terraform detected drift (update/delete).
  
  Plan snippet:
  ${planText.readLines().findAll{ it.startsWith("  ~ ") || it.startsWith("  - ") }.join("\n")}
  """,
              to: "${env.EMAIL_RECIPIENTS}"
            )
            error("Stopping pipeline due to real drift (update/delete).")
          } else {
            // only creates, safe to proceed
            echo " Only new resources detected, no drift."
          }
        } else {
          // exitCode==0, no changes
          echo "No infrastructure changes at all."
        }
      }
    }
  }
}

    stage('Terraform apply') {
      when {
        expression { return terraformChanged }
      }
      steps {
        withCredentials([file(credentialsId: 'GCP-credinals', variable: 'GCP_credinals')]) {
          script {
            try {
              sh '''
                docker run --rm \
                  -v "$PWD/terraform:/workspace" \
                  -v "$GCP_credinals:/workspace/creds.json" \
                  -w /workspace \
                  -e GOOGLE_APPLICATION_CREDENTIALS="/workspace/creds.json" \
                  hashicorp/terraform:1.9.7 \
                  apply -auto-approve tfplan
              '''
              
              emailext(
                subject: "Terraform Apply Successful",
                body: "Terraform Apply completed successfully.",
                to: "${env.EMAIL_RECIPIENTS}"
              )

            } catch (err) {
              emailext(
                subject: "Terraform Apply Failed",
                body: "Terraform Apply failed! Check Jenkins console for details.",
                to: "${env.EMAIL_RECIPIENTS}"
              )
              error("Terraform Apply failed")
            }
          }
        }
      }
    }


stage('Ansible: Install Galaxy Roles') {
  when {
    expression { return ansibleChanged }
  }
  steps {
    sh '''
     docker run --rm \
  -v "$PWD/Ansible":/ansible \
  -w /ansible \
  cytopia/ansible:latest \
  ansible-galaxy install -r requirements.yaml -p roles
    '''
  }
}


stage('Ansible: Lint') {
  when {
    expression { return ansibleChanged }
  }
  steps {
    script {
      try {
        sh '''
          docker run --rm \
            -v "$PWD/Ansible":/data \
            -w /data \
            -e ANSIBLE_ROLES_PATH=/data/roles \
            pipelinecomponents/ansible-lint:latest \
            playbook.yaml --exclude roles

        '''
        echo "Ansible lint passed."
      } catch (err) {
        emailext(
          subject: "Ansible Lint Failed",
          body: "Ansible linting failed. Please fix issues before proceeding.",
          to: "${env.EMAIL_RECIPIENTS}"
        )
        error("Ansible lint failed. Stopping pipeline.")
      }
    }
  }
}


stage('Ansible: Run Playbook') {
  when {
    expression { return ansibleChanged }
  }
  steps {
    withCredentials([
      file(credentialsId: 'ansible-inventory', variable: 'INV'),
      sshUserPrivateKey(
        credentialsId: 'ansible-ssh-key',
        keyFileVariable:   'SSH_KEY',
        usernameVariable:  'ANSIBLE_USER'
      )
    ]) {
      script {
        try {
          sh '''
  docker run --rm \
    -v "$PWD/Ansible":/ansible \
    -v "$INV":/ansible/inventory/hosts.ini:ro \
    -v "$SSH_KEY":/root/.ssh/id_rsa:ro \
    -w /ansible \
    -e ANSIBLE_ROLES_PATH=/ansible/roles \
    -e ANSIBLE_HOST_KEY_CHECKING=False \
    cytopia/ansible:2.9-tools \
    ansible-playbook \
      -i inventory/hosts.ini \
      --private-key=/root/.ssh/id_rsa \
      -u $ANSIBLE_USER \
      playbook.yaml
'''
          echo " Ansible playbook ran successfully."
        } catch (err) {
          emailext(
            subject: "Ansible Playbook Failed ",
            body: "Ansible playbook execution failed. Check Jenkins logs for details.",
            to: "${env.EMAIL_RECIPIENTS}"
          )
          error("Ansible playbook failed.")
        }
      }
    }
  }
}

stage('Load Release Metadata') {
  steps {
    script {
      if (fileExists(RELEASE_FILE)) {
        def release = readYaml(file: RELEASE_FILE)

        env.VERSION        = release.version
        env.DESCRIPTION    = release.description
        env.docker_repo    = release.docker_repo
        env.APPLY_CHANGES  = release.apply_changes.toString()
        env.IMAGE_NAME     = "${release.docker_repo}:${release.version}"

        echo "Version: ${env.VERSION}"
        echo "Description: ${env.DESCRIPTION}"
        echo "Docker Tag: ${env.IMAGE_NAME}"
        echo "Apply Changes? ${env.APPLY_CHANGES}"
      } else {
        error("release.yaml not found at ${RELEASE_FILE}")
      }
    }
  }
}


































  }
}